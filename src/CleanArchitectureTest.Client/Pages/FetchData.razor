@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<input @bind="_productSKU" placeholder="SKU"/>
<button @onclick="CreateProduct">Create</button>

@if (_products == null)
{
    <p><em>No products...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>SKU</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.SKU</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private IEnumerable<Product> _products;
    private string _productSKU;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        await ReadProducts();
    }

    private async Task ReadProducts() 
    {
        _products = await Http.GetFromJsonAsync<IEnumerable<Product>>("product");
    }

    private async Task CreateProduct() {
        var command = new CreateProductCommand();
        command.SKU = _productSKU;
        await Http.PostAsJsonAsync("product", command);
        await ReadProducts();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
